uniform sampler2DShadow shadowMap;
uniform sampler2D tex;

varying vec3 normal, lightDir, eyeVec;
varying vec4 ShadowCoord;


void main (void)
{
	vec4 ambient_color = 
	(gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient) + 
	(gl_LightSource[0].ambient * gl_FrontMaterial.ambient);
							

	float biais1 = 0.001;
	float biais2 = 0.003;
	float visibility = 0.0;
	visibility += 3.0*shadow2D( shadowMap, vec3(ShadowCoord.xy+vec2(+0.00,+0.00),(ShadowCoord.z-biais1)/ShadowCoord.w) ).r;
	visibility += shadow2D( shadowMap, vec3(ShadowCoord.xy+vec2(0.003,0),(ShadowCoord.z-biais2)/ShadowCoord.w) ).r;
	visibility += shadow2D( shadowMap, vec3(ShadowCoord.xy+vec2(-0.003,0),(ShadowCoord.z-biais2)/ShadowCoord.w) ).r;
	visibility += shadow2D( shadowMap, vec3(ShadowCoord.xy+vec2(0,0.003),(ShadowCoord.z-biais2)/ShadowCoord.w) ).r;
	visibility += shadow2D( shadowMap, vec3(ShadowCoord.xy+vec2(0,-0.003),(ShadowCoord.z-biais2)/ShadowCoord.w) ).r;
	visibility += shadow2D( shadowMap,
	vec3(ShadowCoord.xy+vec2(0.003,0.003),(ShadowCoord.z-biais2)/ShadowCoord.w) ).r;
	visibility += shadow2D( shadowMap,
	vec3(ShadowCoord.xy+vec2(-0.003,-0.003),(ShadowCoord.z-biais2)/ShadowCoord.w) ).r;
	visibility += shadow2D( shadowMap,
	vec3(ShadowCoord.xy+vec2(-0.003,0.003),(ShadowCoord.z-biais2)/ShadowCoord.w) ).r;
	visibility += shadow2D( shadowMap,
	vec3(ShadowCoord.xy+vec2(0.003,-0.003),(ShadowCoord.z-biais2)/ShadowCoord.w) ).r;

	vec3 N = normalize(normal);
	vec3 L = normalize(lightDir);
	
	float lambertTerm = dot(N,L);

	vec4 light_added_color=vec4(0.0,0.0,0.0,0.0);
	if(lambertTerm > 0.0)
	{
		light_added_color += gl_LightSource[0].diffuse * 
		               gl_FrontMaterial.diffuse * 
					   lambertTerm;	
		
		vec3 E = normalize(eyeVec);
		vec3 R = reflect(-L, N);
		float specular = pow( max(dot(R, E), 0.0), 
		                 gl_FrontMaterial.shininess );

		light_added_color +=  10.0*gl_LightSource[0].specular * 
		               gl_FrontMaterial.specular * 
					   specular;	
	}
	light_added_color*=visibility*0.11;
	vec4 color = texture2D(tex,gl_TexCoord[0].xy);

	gl_FragColor = color*(ambient_color+light_added_color);
	//gl_FragColor = color;
	//gl_FragColor = texture2D(tex,ShadowCoord.xy);
	//gl_FragColor=shadow2D(shadowMap,ShadowCoord.xyz);
	
}
